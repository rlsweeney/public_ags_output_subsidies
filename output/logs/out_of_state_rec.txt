------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  D:\GitDir\Projects\ags_capital_vs_output/output/logs/out_of_state_rec.txt
  log type:  text
 opened on:  13 Jul 2022, 05:17:03

. ********************************************************************************
. /* BRING IN EXCEL SPREADSHEET WHERE WE MANUALLY CALCULATED: 
> 
>         These Excel sheets contain a variable called share_r_s:
>                         the share of RECs generated in state r that were 
>                         redeemed in state s
> */
. forval y = 2012 / 2013 {
  2.         import excel "$dropbox\Data\public\recs_tracking\REC-Tracking-data-viewer.xls
> x", sheet("REC Share Variable_`y'") firstrow clear
  3.         drop if states == ""
  4.         gen year = `y'
  5.         tempfile s_`y'
  6.         save "`s_`y''"
  7. }
(1 observation deleted)
file C:\Users\Rich\AppData\Local\Temp\ST_4840_000001.tmp saved
(1 observation deleted)
file C:\Users\Rich\AppData\Local\Temp\ST_4840_000002.tmp saved

. use "`s_2012'"

. append using "`s_2013'"

. 
. /* Only have share variables for 2012 and 2013
>         APPLY IN FOLLOWING WAY:
>         Apply 2012 share variables to 2012 and all years before
>         Apply 2013 share variables to 2013 and after
> */
. capture program drop assign_year_categories

. program define assign_year_categories
  1.         gen before_or_2012 = cond(year <= 2012, 1, 0)
  2. end

. 
. assign_year_categories

. drop year

. 
. bys state: gen num_obs = _N

. assert num_obs == 2

. egen num_cats = nvals(before_or_2012), by(state)

. assert num_cats == 2 //should have 2012 and 2013 value

. 
. rename states state

. tempfile out_of_state_recs

. save "`out_of_state_recs'"
file C:\Users\Rich\AppData\Local\Temp\ST_4840_000003.tmp saved

. 
. * BRING IN MONTHLY REC PRICES FOR STATES WITH REC PRICES
. use "$generated_data/state_year_month_rps_rec.dta", replace

. keep if state != "DC"
(204 observations deleted)

. keep state year month rec_price

. 
. assign_year_categories

. 
. * THIS IS GOING TO MATCH 2012 TO ALL YEARS BEFORE 2012 WITHIN EACH STATE
. * AND MATCH 2013 SHARE TO ALL YEARS AFTER OR ON 2013 WITHIN EACH 
. * ONLY KEEPS THE MATCHES
. joinby state before_or_2012 using "`out_of_state_recs'"

. drop before_or_2012

. 
. /* GOAL:
> 
>    CREATE A WEIGHTED REC PRICE AVERAGE BY SUMMING REC_PRICE_IN_S * SHARE_R_S
>    
>    BUT WE DON'T HAVE REC PRICES FOR ALL STATES.
>    
>    GOING TO RE-WEIGHT PROPORTIONS SO THAT IF WE HAVE 4 STATES WITH 1/4 AND ONE
>    IS MISSING REMAINING 3 GET 1/3
>  */
. gen missing_rec = cond(rec_price == ., 1, 0)

. 
. foreach var of varlist share* { 
  2.         local state_r = substr("`var'", 7, 2)
  3.         * GENERATE A TOTAL AMONG THOSE THAT NON-MISSING
.         bys year month: egen sum_`state_r'_nomissing = total(`var' * !missing_rec)
  4.         
.         * CALCULATE NEW SHARE BY DIVIDING BY TOTAL AMONG NON-MISSING
.         bys year month: gen new_share_`state_r' = `var' / sum_`state_r'_nomissing if !mi
> ssing_rec
  5. }
(5,916 missing values generated)
(5,916 missing values generated)
(5,161 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,131 missing values generated)
(4,955 missing values generated)
(4,955 missing values generated)
(5,916 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)

. 
. * NO LONGER NEED OLD SHARES
. keep year month missing_rec rec_price new_share*

. 
. * MAKE SURE THEY RE-WEIGHTED PROPORTIONS SUM TO 1 or 0
. preserve

.         collapse (sum) new_share*, by(year month)

.         foreach var of varlist new_share* {
  2.                 qui summ `var'
  3.                 local round_max = round(`r(max)', 1)
  4.                 assert `round_max' == 0 | `round_max' == 1
  5.         }

. restore

. 
. /* NOW CALCULATE REC FOR SEACH STATE BY:
>         SUMMING SHARE OF STATE_R_S * PRICE IN STATE *
> */
. foreach var of varlist new_share* {
  2.         local state_r = substr("`var'",11, 2)
  3.         
.         * ONLY FILLED IN FOR OBS WITH REC PRICES
.         gen expected_`state_r'_rec = `var' * rec_price
  4. }
(5,916 missing values generated)
(5,916 missing values generated)
(5,161 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,131 missing values generated)
(4,955 missing values generated)
(4,955 missing values generated)
(5,916 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(4,814 missing values generated)
(5,916 missing values generated)
(4,814 missing values generated)

. * KEEP ONLY EXPECTED_REC FOR SEACH COLUMN AND SUM TO GET WEIGHTED AVG
. collapse (sum) expected_*, by(year month)

. 
. /* TRANSPOSE THE MATRIX
> 
> YEAR    MONTH          CA_EXPECTED_REC        MD_EXPECTED_REC       
> 2012     1                  x                      y
> 
> TO
> 
> STATE  YEAR   MONTH  EXPECTED_REC
> CA      2012     1      x
> MD      2012     1      Y
> */
. local state_list

. foreach var of varlist expected* {
  2.         local state_list `state_list' `=substr("`var'", 10, 2)'
  3. }

. * LOOP THROUGH COLUMNS KEEP ONLY THAT STATE'S COLUMN. APPEND ALL WITH STATE VARIABLE
. foreach state in `state_list' {
  2.         preserve
  3.                 qui {
  4.                         keep year month expected_`state'_rec
  5.                         gen state = "`state'"
  6.                         rename expected_`state'_rec expected_rec
  7.                         tempfile rec_`state'
  8.                         save "`rec_`state''"
  9.                 }
 10.         restore
 11. }

. clear

. * APPEND ALL OF THE D-SETS
. foreach state in `state_list' {
  2.         append using "`rec_`state''"
  3. }

. label var expected_rec "Average REC Price adjusted for out-of-state"

. order state year month

. sort state year month

. compress
  (0 bytes saved)

. save "$generated_data/recs_out_of_state_adjustment.dta", replace
(note: file D:\GitDir\Projects\ags_capital_vs_output/generated_data/recs_out_of_state_adju
> stment.dta not found)
file D:\GitDir\Projects\ags_capital_vs_output/generated_data/recs_out_of_state_adjustment.
> dta saved

. ********************************************************************************
. tempsetup
D:\GitDir\Projects\ags_capital_vs_output\temp

. capture log close
